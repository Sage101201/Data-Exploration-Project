Age_category == "A_Adult" ~ "Adult",
Age_category == "A_Old" ~ "Old"
))
# Rename the column
transformed_data <- transformed_data %>%
rename(SA2_name = `SA2.name`)
# Step 2: Select required columns (Year, SA2 name, Age category, Population Count)
transformed_data <- transformed_data %>%
select(Year, SA2_name, Age_category, Population_Count)
# Display the first few rows of the transformed data
transformed_data
data$Check_Child <- data$M_Child + data$F_Child
data$Check_Teen <- data$M_Teen + data$F_Teen
data$Check_Adult <- data$M_Adult + data$F_Adult
data$Check_Old <- data$M_Old + data$F_Old
# Check if all checks are TRUE
all_checks <- all(data$Check_Child == data$A_Child & data$Check_Teen == data$A_Teen & data$Check_Adult == data$A_Adult & data$Check_Old == data$A_Old)
print(all_checks)  # This should return TRUE if all checks are TRUE
# Load required libraries
library(dplyr)
# Read the data from the CSV file
data <- read.csv("extracted_population_data.csv")
data
# Replace spaces with underscores in column names
colnames(data) <- make.names(colnames(data), unique = TRUE)
data
# Combine age groups
data <- data %>%
mutate(M_Child = `M..0.4.` + `M..5.9.`,
M_Teen = `M..10.14.` + `M..15.19.`,
M_Adult = `M..20.24.` + `M..25.29.` + `M..30.34.` + `M..35.39.` + `M..40.44.` + `M..45.49.` + `M..50.54.` + `M..55.59.`,
M_Old = `M..60.64.` + `M..65.69.` + `M..70.74.` + `M..75.79.` + `M..80.84.` + `M..85..`,
F_Child = `F..0.4.` + `F..5.9.`,
F_Teen = `F..10.14.` + `F..15.19.`,
F_Adult = `F..20.24.` + `F..25.29.` + `F..30.34.` + `F..35.39.` + `F..40.44.` + `F..45.49.` + `F..50.54.` + `F..55.59.`,
F_Old = `F..60.64.` + `F..65.69.` + `F..70.74.` + `F..75.79.` + `F..80.84.` + `F..85..`,
A_Child = `A..0.4.` + `A..5.9.`,
A_Teen = `A..10.14.` + `A..15.19.`,
A_Adult = `A..20.24.` + `A..25.29.` + `A..30.34.` + `A..35.39.` + `A..40.44.` + `A..45.49.` + `A..50.54.` + `A..55.59.`,
A_Old = `A..60.64.` + `A..65.69.` + `A..70.74.` + `A..75.79.` + `A..80.84.` + `A..85..`) %>%
select(-starts_with("M.."), -starts_with("F.."), -starts_with("A.."))
# Combine SA2 names
data <- data %>%
mutate(`SA2.name` = case_when(
`SA2.name` %in% c("Southbank (West) - South Wharf", "Southbank - East") ~ "Southbank",
`SA2.name` %in% c("Melbourne CBD - East", "Melbourne CBD - North", "Melbourne CBD - West") ~ "Melbourne (CBD)",
`SA2.name` %in% c("Port Melbourne", "Port Melbourne Industrial") ~ "Port Melbourne",
`SA2.name` %in% c("Flemington Racecourse", "Royal Botanic Gardens Victoria") ~ "Melbourne (Remainder)",
`SA2.name` == "South Yarra - West" ~ "South Yarra",
`SA2.name` == "Kensington (Vic.)" ~ "Kensington",
`SA2.name` == "West Melbourne - Residential" ~ "West Melbourne (Residential)",
`SA2.name` == "West Melbourne - Industrial" ~ "West Melbourne (Industrial)",
TRUE ~ `SA2.name`
)) %>%
filter(!(`SA3.name` == "Port Phillip" & `SA2.name` != "Port Melbourne"))
data
library(dplyr)
library(tidyr)
# Assuming your dataset is named 'data'
# Step 1: Reshape the data from wide to long format
transformed_data <- data %>%
pivot_longer(cols = starts_with("A_"),
names_to = "Age_category",
values_to = "Population_Count") %>%
mutate(Age_category = case_when(
Age_category == "A_Child" ~ "Child",
Age_category == "A_Teen" ~ "Teen",
Age_category == "A_Adult" ~ "Adult",
Age_category == "A_Old" ~ "Old"
))
# Rename the column
transformed_data <- transformed_data %>%
rename(CBD_region = `SA2.name`)
# Step 2: Select required columns (Year, SA2 name, Age category, Population Count)
transformed_data <- transformed_data %>%
select(Year, SA2_name, Age_category, Population_Count)
library(dplyr)
library(tidyr)
# Assuming your dataset is named 'data'
# Step 1: Reshape the data from wide to long format
transformed_data <- data %>%
pivot_longer(cols = starts_with("A_"),
names_to = "Age_category",
values_to = "Population_Count") %>%
mutate(Age_category = case_when(
Age_category == "A_Child" ~ "Child",
Age_category == "A_Teen" ~ "Teen",
Age_category == "A_Adult" ~ "Adult",
Age_category == "A_Old" ~ "Old"
))
# Rename the column
transformed_data <- transformed_data %>%
rename(CBD_region = `SA2.name`)
# Step 2: Select required columns (Year, SA2 name, Age category, Population Count)
transformed_data <- transformed_data %>%
select(Year, CBD_region, Age_category, Population_Count)
# Display the first few rows of the transformed data
transformed_data
# Create a grid of bar charts
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free", space = "free") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "Age Group", y = "Population", title = "Population by Age Group")
# Print the plot
print(p)
# Create a grid of bar charts with fixed facet heights
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free", space = "free") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_blank()) +      # Remove facet strip text
theme(aspect.ratio = 1,                  # Set aspect ratio to 1:1
panel.spacing = unit(0, "lines"),  # Remove spacing between panels
strip.placement = "outside") +      # Place facet labels outside
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()) + # Remove minor grid lines
theme(panel.border = element_blank(),  # Remove panel borders
panel.background = element_blank()) +  # Remove panel background
theme(strip.background = element_blank(),  # Remove strip background
strip.text = element_blank()) +     # Remove strip text
theme(strip.placement = "outside") +     # Place strip labels outside
theme(panel.spacing.y = unit(0, "lines")) +  # Remove vertical panel spacing
theme(aspect.ratio = 1) +                # Set aspect ratio to 1:1
labs(x = "Age Group", y = "Population", title = "Population by Age Group")
# Print the plot
print(p)
# Create a grid of bar charts with fixed facet heights
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free", space = "free") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_blank()) +      # Remove facet strip text
theme(panel.spacing = unit(0, "lines"),   # Remove spacing between panels
strip.placement = "outside",        # Place facet labels outside
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_blank(),     # Remove panel borders
panel.background = element_blank(), # Remove panel background
strip.background = element_blank(), # Remove strip background
strip.text = element_blank()) +     # Remove strip text
labs(x = "Age Group", y = "Population", title = "Population by Age Group")
# Print the plot
print(p)
# Create a grid of bar charts with fixed facet heights
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free", space = "free") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_blank()) +      # Remove facet strip text
theme(panel.spacing = unit(0, "lines"),   # Remove spacing between panels
strip.placement = "outside") +     # Place facet labels outside
labs(x = "Age Group", y = "Population", title = "Population by Age Group")
# Print the plot
print(p)
# Create a grid of bar charts with fixed facet heights
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_blank()) +      # Remove facet strip text
theme(panel.spacing = unit(0, "lines"),   # Remove spacing between panels
strip.placement = "outside") +     # Place facet labels outside
labs(x = "Age Group", y = "Population", title = "Population by Age Group")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("plot.png", p, width = 10, height = 8, units = "in")
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 15, height = 12, units = "in")
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_blank()) +      # Remove facet strip text
theme(panel.spacing = unit(0, "lines"),   # Remove spacing between panels
strip.placement = "outside") +      # Place facet labels outside
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank()) +  # Remove facet strip background
#strip.text = element_blank()) +      # Remove facet strip text
theme(panel.spacing = unit(0, "lines"),   # Remove spacing between panels
strip.placement = "outside") +      # Place facet labels outside
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.placement = "outside",         # Place facet labels outside
panel.spacing = unit(0, "lines"),   # Remove spacing between panels
plot.margin = margin(t = 1.5, r = 1, b = 1.5, l = 1)) +  # Adjust plot margins
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_text(angle = 0, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_text(angle = 0, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_text(angle = 270, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_text(angle = 270, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines"),
axis.text.y.right = element_text(angle = 0, hjust = 0.5, vjust = 1)) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_text(angle = 270, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines"),
axis.text.y.right = element_text(angle = 90, hjust = 0.5, vjust = 1)) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_text(angle = 270, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines"),
axis.text.y = element_text(angle = 90, hjust = 0.5, vjust = 1)) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text = element_text(angle = 270, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text.x = element_text(angle = 0, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text.x = element_text(angle = 90, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text.y = element_text(angle = 90, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text.y = element_text(angle = 0, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
# Load required libraries
library(dplyr)
# Read the data from the CSV file
data <- read.csv("extracted_population_data.csv")
data
# Replace spaces with underscores in column names
colnames(data) <- make.names(colnames(data), unique = TRUE)
data
# Combine age groups
data <- data %>%
mutate(M_Child = `M..0.4.` + `M..5.9.`,
M_Teen = `M..10.14.` + `M..15.19.`,
M_Adult = `M..20.24.` + `M..25.29.` + `M..30.34.` + `M..35.39.` + `M..40.44.` + `M..45.49.` + `M..50.54.` + `M..55.59.`,
M_Old = `M..60.64.` + `M..65.69.` + `M..70.74.` + `M..75.79.` + `M..80.84.` + `M..85..`,
F_Child = `F..0.4.` + `F..5.9.`,
F_Teen = `F..10.14.` + `F..15.19.`,
F_Adult = `F..20.24.` + `F..25.29.` + `F..30.34.` + `F..35.39.` + `F..40.44.` + `F..45.49.` + `F..50.54.` + `F..55.59.`,
F_Old = `F..60.64.` + `F..65.69.` + `F..70.74.` + `F..75.79.` + `F..80.84.` + `F..85..`,
A_Child = `A..0.4.` + `A..5.9.`,
A_Teen = `A..10.14.` + `A..15.19.`,
A_Adult = `A..20.24.` + `A..25.29.` + `A..30.34.` + `A..35.39.` + `A..40.44.` + `A..45.49.` + `A..50.54.` + `A..55.59.`,
A_Old = `A..60.64.` + `A..65.69.` + `A..70.74.` + `A..75.79.` + `A..80.84.` + `A..85..`) %>%
select(-starts_with("M.."), -starts_with("F.."), -starts_with("A.."))
# Combine SA2 names
data <- data %>%
mutate(`SA2.name` = case_when(
`SA2.name` %in% c("Southbank (West) - South Wharf", "Southbank - East") ~ "Southbank",
`SA2.name` %in% c("Melbourne CBD - East", "Melbourne CBD - North", "Melbourne CBD - West") ~ "Melbourne (CBD)",
`SA2.name` %in% c("Port Melbourne", "Port Melbourne Industrial") ~ "Port Melbourne",
`SA2.name` %in% c("Flemington Racecourse", "Royal Botanic Gardens Victoria") ~ "Melbourne (Remainder)",
`SA2.name` == "South Yarra - West" ~ "South Yarra",
`SA2.name` == "Kensington (Vic.)" ~ "Kensington",
`SA2.name` == "West Melbourne - Residential" ~ "West Melbourne (Residential)",
`SA2.name` == "West Melbourne - Industrial" ~ "West Melbourne (Industrial)",
TRUE ~ `SA2.name`
)) %>%
filter(!(`SA3.name` == "Port Phillip" & `SA2.name` != "Port Melbourne"))
data
library(dplyr)
library(tidyr)
# Assuming your dataset is named 'data'
# Step 1: Reshape the data from wide to long format
transformed_data <- data %>%
pivot_longer(cols = starts_with("A_"),
names_to = "Age_category",
values_to = "Population_Count") %>%
mutate(Age_category = case_when(
Age_category == "A_Child" ~ "Child",
Age_category == "A_Teen" ~ "Teen",
Age_category == "A_Adult" ~ "Adult",
Age_category == "A_Old" ~ "Old"
))
# Rename the column
transformed_data <- transformed_data %>%
rename(CBD_region = `SA2.name`)
# Step 2: Select required columns (Year, SA2 name, Age category, Population Count)
transformed_data <- transformed_data %>%
select(Year, CBD_region, Age_category, Population_Count)
# Step 3: Group by Year, CBD_region, and Age_category, and calculate the sum of Population_Count
transformed_data <- transformed_data %>%
group_by(Year, CBD_region, Age_category) %>%
summarize(Population_Count = sum(Population_Count, na.rm = TRUE))
# Display the first few rows of the transformed data
transformed_data
data$Check_Child <- data$M_Child + data$F_Child
data$Check_Teen <- data$M_Teen + data$F_Teen
data$Check_Adult <- data$M_Adult + data$F_Adult
data$Check_Old <- data$M_Old + data$F_Old
# Check if all checks are TRUE
all_checks <- all(data$Check_Child == data$A_Child & data$Check_Teen == data$A_Teen & data$Check_Adult == data$A_Adult & data$Check_Old == data$A_Old)
print(all_checks)  # This should return TRUE if all checks are TRUE
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free") +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text.y = element_text(angle = 0, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
# Load the RColorBrewer package
library(RColorBrewer)
# Create a grid of bar charts with fixed facet heights and the Reds color palette
p <- ggplot(transformed_data, aes(x = Age_category, y = Population_Count, fill = Age_category)) +
geom_bar(stat = "identity") +
facet_grid(CBD_region ~ Year, scales = "free_y", space = "free", drop = FALSE) +
scale_fill_brewer(palette = "Reds") +  # Use Reds color palette
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.background = element_blank(),  # Remove facet strip background
strip.text.y = element_text(angle = 0, hjust = 0.5, vjust = 1),  # Print labels horizontally upright
panel.spacing = unit(0, "lines")) +   # Remove spacing between panels
labs(x = "Age Group", y = "Population", title = "Population by Age Group across CLUE Areas and Time")
# Print the plot
print(p)
# Save the plot to a file with larger dimensions
ggsave("vis_1.png", p, width = 20, height = 18, units = "in")
