# Combine forecast results for all areas into a single dataframe
forecast_values_all <- do.call(rbind, forecast_results)
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
# Split data by CLUE_Areas and perform forecasting
forecast_results <- lapply(unique(df$CLUE_Areas), function(area) {
# Subset data for the current area
df_subset <- df %>% filter(CLUE_Areas == area)
# Create time series objects
ts_population <- ts(df_subset$Population_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_energy <- ts(df_subset$Energy_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_trees <- ts(df_subset$Trees_CO2_absorbed_tonnes, start = min(df_subset$Year), frequency = 1)
ts_total_offset <- ts(df_subset$Total_CO2offset_tonnes, start = min(df_subset$Year), frequency = 1)
# Fit ARIMA models
arima_population <- auto.arima(ts_population)
arima_energy <- auto.arima(ts_energy)
arima_trees <- auto.arima(ts_trees)
arima_total_offset <- auto.arima(ts_total_offset)
# Forecast values for 2024
forecast_population <- forecast(arima_population, h = 3)  # Forecast 3 years ahead (up to 2024)
forecast_energy <- forecast(arima_energy, h = 3)
forecast_trees <- forecast(arima_trees, h = 3)
forecast_total_offset <- forecast(arima_total_offset, h = 3)
# Create dataframe for forecasted values
forecast_values <- data.frame(
CLUE_Areas = rep(area, 3),
Year = rep(2024, 3),
Population_CO2_tonnes = forecast_population$mean,
Energy_CO2_tonnes = forecast_energy$mean,
Trees_CO2_absorbed_tonnes = forecast_trees$mean,
Total_CO2offset_tonnes = forecast_total_offset$mean
)
return(forecast_values)
})
# Combine forecast results for all areas into a single dataframe
forecast_values_all <- do.call(rbind, forecast_results)
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
# Function to perform forecasting for a specific CLUE_Areas
forecast_area <- function(area) {
# Subset data for the current area
df_subset <- df %>% filter(CLUE_Areas == area)
# Create time series objects
ts_population <- ts(df_subset$Population_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_energy <- ts(df_subset$Energy_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_trees <- ts(df_subset$Trees_CO2_absorbed_tonnes, start = min(df_subset$Year), frequency = 1)
ts_total_offset <- ts(df_subset$Total_CO2offset_tonnes, start = min(df_subset$Year), frequency = 1)
# Fit ARIMA models
arima_population <- auto.arima(ts_population)
arima_energy <- auto.arima(ts_energy)
arima_trees <- auto.arima(ts_trees)
arima_total_offset <- auto.arima(ts_total_offset)
# Forecast values for 2024
forecast_population <- forecast(arima_population, h = 3)  # Forecast 3 years ahead (up to 2024)
forecast_energy <- forecast(arima_energy, h = 3)
forecast_trees <- forecast(arima_trees, h = 3)
forecast_total_offset <- forecast(arima_total_offset, h = 3)
# Create dataframe for forecasted values
forecast_values <- data.frame(
CLUE_Areas = area,
Year = rep(2024, 3),
Population_CO2_tonnes = forecast_population$mean,
Energy_CO2_tonnes = forecast_energy$mean,
Trees_CO2_absorbed_tonnes = forecast_trees$mean,
Total_CO2offset_tonnes = forecast_total_offset$mean
)
return(forecast_values)
}
# Apply forecasting function to each CLUE_Areas
forecast_results <- lapply(unique(df$CLUE_Areas), forecast_area)
# Combine forecast results for all areas into a single dataframe
forecast_values_all <- do.call(rbind, forecast_results)
forecast_results
# Function to perform forecasting for a specific CLUE_Areas
forecast_area <- function(area) {
# Subset data for the current area
df_subset <- df %>% filter(CLUE_Areas == area)
# Create time series objects
ts_population <- ts(df_subset$Population_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_energy <- ts(df_subset$Energy_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_trees <- ts(df_subset$Trees_CO2_absorbed_tonnes, start = min(df_subset$Year), frequency = 1)
ts_total_offset <- ts(df_subset$Total_CO2offset_tonnes, start = min(df_subset$Year), frequency = 1)
# Fit ARIMA models
arima_population <- auto.arima(ts_population)
arima_energy <- auto.arima(ts_energy)
arima_trees <- auto.arima(ts_trees)
arima_total_offset <- auto.arima(ts_total_offset)
# Forecast values for 2024
forecast_population <- forecast(arima_population, h = 3)  # Forecast 3 years ahead (up to 2024)
forecast_energy <- forecast(arima_energy, h = 3)
forecast_trees <- forecast(arima_trees, h = 3)
forecast_total_offset <- forecast(arima_total_offset, h = 3)
# Create dataframe for forecasted values
forecast_values <- data.frame(
CLUE_Areas = area,
Year = rep(2024, 1),
Population_CO2_tonnes = forecast_population$mean,
Energy_CO2_tonnes = forecast_energy$mean,
Trees_CO2_absorbed_tonnes = forecast_trees$mean,
Total_CO2offset_tonnes = forecast_total_offset$mean
)
return(forecast_values)
}
# Apply forecasting function to each CLUE_Areas
forecast_results <- lapply(unique(df$CLUE_Areas), forecast_area)
# Combine forecast results for all areas into a single dataframe
forecast_values_all <- do.call(rbind, forecast_results)
forecast_results
# Function to perform forecasting for a specific CLUE_Areas
forecast_area <- function(area) {
# Subset data for the current area
df_subset <- df %>% filter(CLUE_Areas == area)
# Create time series objects
ts_population <- ts(df_subset$Population_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_energy <- ts(df_subset$Energy_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_trees <- ts(df_subset$Trees_CO2_absorbed_tonnes, start = min(df_subset$Year), frequency = 1)
ts_total_offset <- ts(df_subset$Total_CO2offset_tonnes, start = min(df_subset$Year), frequency = 1)
# Fit ARIMA models
arima_population <- auto.arima(ts_population)
arima_energy <- auto.arima(ts_energy)
arima_trees <- auto.arima(ts_trees)
arima_total_offset <- auto.arima(ts_total_offset)
# Forecast values for 2024
forecast_population <- forecast(arima_population, h = 3)  # Forecast 3 years ahead (up to 2024)
forecast_energy <- forecast(arima_energy, h = 3)
forecast_trees <- forecast(arima_trees, h = 3)
forecast_total_offset <- forecast(arima_total_offset, h = 3)
# Create dataframe for forecasted values
forecast_values <- data.frame(
CLUE_Areas = area,
Year = rep(2024, 3),
Population_CO2_tonnes = forecast_population$mean,
Energy_CO2_tonnes = forecast_energy$mean,
Trees_CO2_absorbed_tonnes = forecast_trees$mean,
Total_CO2offset_tonnes = forecast_total_offset$mean
)
return(forecast_values)
}
# Apply forecasting function to each CLUE_Areas
forecast_results <- lapply(unique(df$CLUE_Areas), forecast_area)
# Combine forecast results for all areas into a single dataframe
forecast_values_all <- do.call(rbind, forecast_results)
forecast_results
type(forecast_results)
forecast_results
# Initialize an empty list to store randomly selected rows
selected_rows <- list()
# Iterate through each dataframe in forecast_results
for (result_df in forecast_results) {
# Randomly select one row from the dataframe
selected_row <- result_df[sample(nrow(result_df), 1), ]
# Append the selected row to the list
selected_rows[[length(selected_rows) + 1]] <- selected_row
}
# Combine selected rows into a single dataframe
selected_forecast_values <- do.call(rbind, selected_rows)
selected_forecast_values
# Initialize an empty list to store randomly selected rows
selected_rows <- list()
# Iterate through each dataframe in forecast_results
for (result_df in forecast_results) {
# Randomly select one row from the dataframe
selected_row <- result_df[sample(nrow(result_df), 1), ]
# Append the selected row to the list
selected_rows[[length(selected_rows) + 1]] <- selected_row
}
# Combine selected rows into a single dataframe
selected_forecast_values <- do.call(rbind, selected_rows)
selected_forecast_values <- selected_forecast_values %>%
mutate(row_index = row_number()) %>%  # Add a new column with row index
select(row_index, everything())
selected_forecast_values
# Initialize an empty list to store randomly selected rows
selected_rows <- list()
# Iterate through each dataframe in forecast_results
for (result_df in forecast_results) {
# Randomly select one row from the dataframe
selected_row <- result_df[sample(nrow(result_df), 1), ]
# Append the selected row to the list
selected_rows[[length(selected_rows) + 1]] <- selected_row
}
# Combine selected rows into a single dataframe
selected_forecast_values <- do.call(rbind, selected_rows)
selected_forecast_values
# Function to perform forecasting for a specific CLUE_Areas
forecast_area <- function(area) {
# Subset data for the current area
df_subset <- df %>% filter(CLUE_Areas == area)
# Create time series objects
ts_population <- ts(df_subset$Population_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_energy <- ts(df_subset$Energy_CO2_tonnes, start = min(df_subset$Year), frequency = 1)
ts_trees <- ts(df_subset$Trees_CO2_absorbed_tonnes, start = min(df_subset$Year), frequency = 1)
ts_total_offset <- ts(df_subset$Total_CO2offset_tonnes, start = min(df_subset$Year), frequency = 1)
# Fit ARIMA models
arima_population <- auto.arima(ts_population)
arima_energy <- auto.arima(ts_energy)
arima_trees <- auto.arima(ts_trees)
arima_total_offset <- auto.arima(ts_total_offset)
# Forecast values for 2024
forecast_population <- forecast(arima_population, h = 3)  # Forecast 3 years ahead (up to 2024)
forecast_energy <- forecast(arima_energy, h = 3)
forecast_trees <- forecast(arima_trees, h = 3)
forecast_total_offset <- forecast(arima_total_offset, h = 3)
# Create dataframe for forecasted values
forecast_values <- data.frame(
CLUE_Areas = area,
Year = rep(2024, 3),
Population_CO2_tonnes = forecast_population$mean,
Energy_CO2_tonnes = forecast_energy$mean,
Trees_CO2_absorbed_tonnes = forecast_trees$mean,
Total_CO2offset_tonnes = forecast_total_offset$mean
)
return(forecast_values)
}
# Apply forecasting function to each CLUE_Areas
forecast_results <- lapply(unique(df$CLUE_Areas), forecast_area)
forecast_results
# Initialize an empty list to store randomly selected rows
selected_rows <- list()
# Iterate through each dataframe in forecast_results
for (result_df in forecast_results) {
# Randomly select one row from the dataframe
selected_row <- result_df[sample(nrow(result_df), 1), ]
# Append the selected row to the list
selected_rows[[length(selected_rows) + 1]] <- selected_row
}
# Combine selected rows into a single dataframe
selected_forecast_values <- do.call(rbind, selected_rows)
selected_forecast_values
library(dplyr)
library(ggplot2)
# Assuming selected_forecast_values is your dataframe containing the selected forecasted values
appended_data <- bind_rows(df, selected_forecast_values)
library(dplyr)
library(ggplot2)
# Convert Year to numeric (double) in selected_forecast_values if needed
selected_forecast_values$Year <- as.numeric(selected_forecast_values$Year)
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 5, 3)), shape = 21, fill = "white") +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5))  # Adjust size range for highlighted points
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5))  # Adjust size range for highlighted points
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year))
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
Forcast <- ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year))
Forcast
ggsave("Forcast.png", CO2_PLOT, width = 15, height = 10, units = "in", dpi = 300, bg = "white")
ggsave("Forcast.png", Forcast, width = 15, height = 10, units = "in", dpi = 300, bg = "white")
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
Forcast <- ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
geom_line() +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year)) +
guides(size = FALSE)
Forcast
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
Forcast <- ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
geom_line() +
geom_smooth(method = "loess") +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year)) +
guides(size = FALSE)
Forcast
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
Forcast <- ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
geom_line() +
geom_smooth(method = "lm") +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year)) +
guides(size = FALSE)
Forcast
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
Forcast <- ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
geom_line() +
geom_smooth() +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year)) +
guides(size = FALSE)
Forcast
library(dplyr)
library(forecast)
df = all_merged
# Convert Year to a date format
df$Year <- as.Date(paste0(df$Year, "-01-01"))
library(dplyr)
library(ggplot2)
# Convert Year column in df to numeric (extract year component)
df <- df %>%
mutate(Year = as.numeric(format(Year, "%Y")))
# Append selected_forecast_values to df
appended_data <- bind_rows(df, selected_forecast_values)
# Plot the data points for the last column in appended_data, highlighting 2024 year points
Forcast <- ggplot(appended_data, aes(x = Year, y = Total_CO2offset_tonnes, color = CLUE_Areas)) +
geom_point(aes(size = ifelse(Year == 2024, 3, 1)), shape = 21, fill = "white") +
geom_line() +
labs(title = "Total CO2 Offset by CLUE_Areas and Year",
x = "Year",
y = "Total CO2 Offset (tonnes)",
color = "CLUE_Areas") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +  # Rotate x-axis labels for better readability
scale_size_continuous(range = c(3, 5)) +
scale_x_continuous(breaks = unique(appended_data$Year), labels = unique(appended_data$Year)) +
guides(size = FALSE)
Forcast
ggsave("Forcast.png", Forcast, width = 15, height = 10, units = "in", dpi = 300, bg = "white")
